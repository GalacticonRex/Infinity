INFINITY Render Engine

HOWTO:
	For creating a window:
		Create basic windows
			InfiCreateWindow( dimensions,
							  ? frame_rate = 60 );
			InfiCreateWindow( name,
							  dimensions,
							  ? frame_rate = 60 );
		Create a more complicated window
			InfiCreateWindow( infi_window_spec_t );
			
		Creating an extension
			class Extension : public infi_extension_t,
							  public UsingUpdate,
							  public UsingPrerender,
							  public UsingRender
							  public UsingPostrender {
				Extension() :
					infi_extension_t( extension_name ) { ... }
				
				void Initialize( infi_window_t* );
				void Detach( infi_window_t* );
				
				void Update( float64 dt );
				void Prerender( float64 dt );
				void Render( const vec2ui& window_size, float64 dt );
				void Postrender( float64 dt );
				
				infi_window_t& Parent();
			}
		
		Add functionality to a window
			InfiExtendWindow( infi_window_t*,
							  infi_extensions_t* );
		
	For a basic rendering program:
	
		enable elements
			InfiPushCanvas( infi_canvas_t* );		 -- what is being rendered to?
			InfiPushCamera( infi_view_transform_t* ) -- how is the render going to be sized?
			InfiPushProgram( infi_program_t* );		 -- how are the pixels going to show up?
			InfiPushVertices( infi_vertices_t* );	 -- what objects are being rendered?
		
		to run the program that has been setup
			InfiDraw();
		
		set elements to original values
			InfiPopCanvas();
			InfiPopCamera();
			InfiPopProgram();
			InfiPopVertices();

-----------------------------------------------------------------
20 Feb 2016
-----------------------------------------------------------------
RESOLVED
* 	need to implement text namespace

-----------------------------------------------------------------
19 Feb 2016
-----------------------------------------------------------------
RESOLVED
!! 	destroy objects intelligently

TO-DO
!!! unify deletion scheme
		currently different objects are deallocated
		in different ways and it sucks
!!	layout control for shaders
?? 	FGL
???	scripting language on top

-----------------------------------------------------------------
18 Feb 2016
-----------------------------------------------------------------
RESOLVED
!!!	key presses don't WORK
* 	HSV to RGB works

-----------------------------------------------------------------
17 Feb 2016
-----------------------------------------------------------------
TO-DO
!!!	key presses don't WORK
!! 	destroy objects intelligently
! 	handle canvas format and output format match-up
* 	handle possibility of reading and writing from the same
		texture in the same render pass
* 	need to implement text namespace
* 	transform feedback
? 	patterns

WHAT'S NEW??
* Better control of what objects can be rendered with others
* Pushed all GL calls to the last possible minute, to negate
	any possibility of incorrectly ordered commands
* Updated the keyboard/mouse API
* No longer able to render individual vertex buffers; they
	must be encapsulated by a vertex object
* Cleaned up program uniforms; now able to pass in functions
	to update every time the program is bound
* Fixed the segfaults in the string_t class
* Made a few adjustments to the infi_extension_t class,
	pushed the separate methods to different classes
* Changed the inheritance structure of a few of the core
	classes (array_t, data_t)
* Began process of moving away from SDL_image; started using
	libjpeg
* Overhauled the error system, now records an error stack
	to make error locating more precise