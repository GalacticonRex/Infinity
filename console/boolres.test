typedef bool (*BooleanResolution)();

struct flag_t {
	virtual operator bool () = 0;
};
struct flag_literal_t : flag_t {
	bool value;
	flag_literal_t() : value(false) { ; }
	flag_literal_t(const flag_literal_t& copy)
		: value(copy.value) { ; }
	flag_literal_t( bool nval )
		: value(nval) { ; }
	flag_literal_t& operator= ( bool nval )
		{ 	value = nval;
			return *this; 	}
	operator bool () { return value; }
};
struct flag_variable_t : flag_t {
	BooleanResolution value;
	flag_variable_t() : value(NULL) { ; }
	flag_variable_t(const flag_variable_t& copy)
		: value(copy.value) { ; }
	flag_variable_t( BooleanResolution nval )
		: value(nval) { ; }
	flag_variable_t& operator= ( BooleanResolution nval )
		{ 	value = nval;
			return *this;	}
	operator bool ()
		{ return (value==NULL) ? false : value(); }
};

static uint32 ticks = 0;
void Run( flag_t& fl ) {
	if ( (bool)fl )
		std::cerr << "PRINTING " << ticks << "!" << std::endl;
	++ ticks;
}
bool Operation() {
	return ( ticks % 16 == 7 ) ? true : false;
}

void ThreadOp( int a ) {
	std::cerr << "Hello " << a << std::endl;
	return;
}