#include "depend/infi_gl.hpp"
#include "render/gl/infi_gl_enabled.hpp"
#include "render/gl/infi_gl.hpp"
#include "render/gl/infi_gl_extensions.hpp"

namespace Infinity {
namespace Render {

	static const uint32 INFI_BLEND						= 0x00000001,
						INFI_COLOR_LOGIC_OP				= 0x00000002,
						INFI_CULL_FACE					= 0x00000004,
						INFI_DEPTH_CLAMP				= 0x00000008,
						INFI_DEBUG_OUTPUT 				= 0x00000010,
						INFI_DEBUG_OUTPUT_SYNCHRONOUS	= 0x00000020,
						INFI_DEPTH_TEST					= 0x00000040,
						INFI_DITHER						= 0x00000080,
						INFI_FRAMEBUFFER_SRGB			= 0x00000100,
						INFI_LINE_SMOOTH				= 0x00000200,
						INFI_MULTISAMPLE				= 0x00000400,
						INFI_POLYGON_SMOOTH				= 0x00000800,
						INFI_POLYGON_OFFSET_FILL		= 0x00001000,
						INFI_POLYGON_OFFSET_LINE		= 0x00002000,
						INFI_POLYGON_OFFSET_POINT		= 0x00004000,
						INFI_PROGRAM_POINT_SIZE			= 0x00008000,
						INFI_PRIMITIVE_RESTART			= 0x00010000,
						INFI_SAMPLE_ALPHA_TO_COVERAGE	= 0x00020000,
						INFI_SAMPLE_ALPHA_TO_ONE		= 0x00040000,
						INFI_SAMPLE_COVERAGE 			= 0x00080000,
						INFI_SAMPLE_MASK				= 0x00100000,
						INFI_SCISSOR_TEST				= 0x00200000,
						INFI_STENCIL_TEST				= 0x00400000,
						INFI_TEXTURE_CUBE_MAP_SEAMLESS	= 0x00800000,
						INFI_CLIP_DISTANCE0 			= 0x01000000,
						INFI_CLIP_DISTANCE1 			= 0x02000000,
						INFI_CLIP_DISTANCE2 			= 0x04000000,
						INFI_CLIP_DISTANCE3 			= 0x08000000,
						INFI_CLIP_DISTANCE4 			= 0x10000000,
						INFI_CLIP_DISTANCE5 			= 0x20000000;

	#define CHECK_GL_ENABLED( name ) \
			if ( GL.IsEnabled( GL_ ## name ) ) \
				this->data |= INFI_ ## name;

	infi_gl_enabled_t::infi_gl_enabled_t( const infi_gl_t& GL ) : data( 0 ) {
		CHECK_GL_ENABLED( BLEND );
		CHECK_GL_ENABLED( COLOR_LOGIC_OP );
		CHECK_GL_ENABLED( CULL_FACE );
		CHECK_GL_ENABLED( DEPTH_CLAMP );
		if ( GL.extensions.debug_output() ) {
			CHECK_GL_ENABLED( DEBUG_OUTPUT );
			CHECK_GL_ENABLED( DEBUG_OUTPUT_SYNCHRONOUS );
		}
		CHECK_GL_ENABLED( DEPTH_TEST );
		CHECK_GL_ENABLED( DITHER );
		CHECK_GL_ENABLED( FRAMEBUFFER_SRGB );
		CHECK_GL_ENABLED( LINE_SMOOTH );
		CHECK_GL_ENABLED( POLYGON_SMOOTH );
		CHECK_GL_ENABLED( POLYGON_OFFSET_FILL );
		CHECK_GL_ENABLED( POLYGON_OFFSET_LINE );
		CHECK_GL_ENABLED( POLYGON_OFFSET_POINT );
		CHECK_GL_ENABLED( PROGRAM_POINT_SIZE );
		CHECK_GL_ENABLED( PRIMITIVE_RESTART );
		if ( GL.extensions.multisample() ) {
			CHECK_GL_ENABLED( MULTISAMPLE );
			CHECK_GL_ENABLED( SAMPLE_ALPHA_TO_COVERAGE );
			CHECK_GL_ENABLED( SAMPLE_ALPHA_TO_ONE );
			CHECK_GL_ENABLED( SAMPLE_COVERAGE );
			CHECK_GL_ENABLED( SAMPLE_MASK );
		}
		CHECK_GL_ENABLED( SCISSOR_TEST );
		CHECK_GL_ENABLED( STENCIL_TEST );
		CHECK_GL_ENABLED( TEXTURE_CUBE_MAP_SEAMLESS );
		CHECK_GL_ENABLED( CLIP_DISTANCE0 );
		CHECK_GL_ENABLED( CLIP_DISTANCE1 );
		CHECK_GL_ENABLED( CLIP_DISTANCE2 );
		CHECK_GL_ENABLED( CLIP_DISTANCE3 );
		CHECK_GL_ENABLED( CLIP_DISTANCE4 );
		CHECK_GL_ENABLED( CLIP_DISTANCE5 );
	}

} }
